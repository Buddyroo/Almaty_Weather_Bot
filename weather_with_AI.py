import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from config import TOKEN, OPENWEATHER_API_KEY, API_OPENAI_KEY
import random
import requests
from datetime import datetime, timedelta
import pytz
import openai
from openai import OpenAI

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=API_OPENAI_KEY, base_url="https://api.proxyapi.ru/openai/v1")

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
days_of_week = {
    "Monday": "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
    "Tuesday": "–í–¢–û–†–ù–ò–ö",
    "Wednesday": "–°–†–ï–î–ê",
    "Thursday": "–ß–ï–¢–í–ï–†–ì",
    "Friday": "–ü–Ø–¢–ù–ò–¶–ê",
    "Saturday": "–°–£–ë–ë–û–¢–ê",
    "Sunday": "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
def get_wind_direction(deg):
    directions = [
        "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ–∫-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
        "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ–∫-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
        "—é–∂–Ω—ã–π", "—é–≥–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
        "–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
    ]
    idx = round(deg / 22.5) % 16
    return directions[idx]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
def get_current_weather():
    url = f"http://api.openweathermap.org/data/2.5/weather?lat=43.2567&lon=76.9286&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {response.status_code}, {response.text}")
        return None
    data = response.json()
    timezone = pytz.timezone('Asia/Almaty')
    weather_info = {
        "temp": data["main"]["temp"],
        "feels_like": data["main"]["feels_like"],
        "humidity": data["main"]["humidity"],
        "pressure": data["main"]["pressure"],
        "visibility": data.get("visibility", "N/A"),
        "wind_speed": data["wind"]["speed"],
        "wind_deg": data["wind"]["deg"],
        "wind_direction": get_wind_direction(data["wind"]["deg"]),
        "main": data["weather"][0]["main"],
        "description": data["weather"][0]["description"],
        "sunrise": datetime.fromtimestamp(data["sys"]["sunrise"], tz=timezone).strftime('%H:%M:%S'),
        "sunset": datetime.fromtimestamp(data["sys"]["sunset"], tz=timezone).strftime('%H:%M:%S')
    }
    return weather_info


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
def get_forecast():
    url = f"http://api.openweathermap.org/data/2.5/forecast?lat=43.2567&lon=76.9286&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã: {response.status_code}, {response.text}")
        return None
    data = response.json()
    if "list" not in data:
        print(f"–û—à–∏–±–∫–∞: –∫–ª—é—á 'list' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API: {data}")
        return None

    timezone = pytz.timezone('Asia/Almaty')
    forecast = []
    daily_forecast = {}

    for entry in data["list"]:
        dt = datetime.fromtimestamp(entry["dt"], tz=timezone)
        date = dt.date()
        time = dt.strftime('%H:%M')

        if date not in daily_forecast:
            daily_forecast[date] = {
                "temps": [],
                "wind_speeds": [],
                "wind_directions": [],
                "humidity": [],
                "weather": []
            }

        daily_forecast[date]["temps"].append(entry["main"]["temp"])
        daily_forecast[date]["wind_speeds"].append(entry["wind"]["speed"])
        daily_forecast[date]["wind_directions"].append(entry["wind"]["deg"])
        daily_forecast[date]["humidity"].append(entry["main"]["humidity"])
        daily_forecast[date]["weather"].append({
            "time": time,
            "main": entry["weather"][0]["main"],
            "description": entry["weather"][0]["description"]
        })

    for date, values in daily_forecast.items():
        forecast.append({
            "date": date,
            "temp_min": min(values["temps"]),
            "temp_max": max(values["temps"]),
            "humidity": values["humidity"][0],  # Assuming humidity doesn't vary much within a day
            "wind_speed": sum(values["wind_speeds"]) / len(values["wind_speeds"]),
            "wind_direction": get_wind_direction(sum(values["wind_directions"]) / len(values["wind_directions"])),
            "weather": values["weather"]
        })

    return forecast


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
def question_answer_from_ChatGPT(question):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": question}]
    )

    answer = response.choices[0].message.content

    return answer


@dp.message(Command("photo"))
async def photo(message: Message):
    list_photos = [
        'https://i.pinimg.com/236x/26/b7/14/26b714f32858d685f16d93938545f1b0.jpg',
        'https://i.pinimg.com/736x/00/aa/74/00aa74ebee5b6d90ae8fd89cfd81bd7e.jpg'
    ]
    random_photo = random.choice(list_photos)
    await message.answer_photo(photo=random_photo, caption="–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ")


@dp.message(F.text == "–ü—Ä–∏–≤–µ—Ç –±–æ—Ç")
async def hello(message: Message):
    await message.answer(f"–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!")


@dp.message(F.photo)
async def photo_react(message: Message):
    answers_list = ['–û–≥–æ –∫–∞–∫–æ–µ —Ñ–æ—Ç–æ', '–ö–ª–∞—Å—Å–Ω–∞—è —Ñ–æ—Ç–∫–∞', '–¢—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä', '–°–º–æ—Ç—Ä—é –∏ —Ä–∞–¥—É—é—Å—å']
    await message.answer(random.choice(answers_list))


@dp.message(Command("help"))
async def help(message: Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/help\n/start\n/photo - —Ñ–æ—Ç–æ —â–µ–Ω–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n/weather_now - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n/weather_later - –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π")


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!")


@dp.message(Command("weather_now"))
async def weather_now(message: Message):
    await message.answer("–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –≤ –ê–ª–º–∞—Ç—ã –¥–µ–ª–∞ –Ω–∞ —É–ª–∏—Ü–µ...")
    weather_info = get_current_weather()
    if weather_info is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.")
        return

    wind_direction = weather_info['wind_direction']
    wind_speed = weather_info['wind_speed']
    wind_deg = weather_info['wind_deg']
    human_readable_wind = f"–í–µ—Ç–µ—Ä –¥—É–µ—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {wind_speed} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind_direction}."

    weather_message = (
        f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_info['temp']}¬∞C\n"
        f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_info['feels_like']}¬∞C\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_info['humidity']}%\n"
        f"–î–∞–≤–ª–µ–Ω–∏–µ: {weather_info['pressure']} hPa\n"
        f"–í–∏–¥–∏–º–æ—Å—Ç—å: {weather_info['visibility']} –º\n"
        f"{human_readable_wind}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {weather_info['main']} - {weather_info['description']}\n"
        f"–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞: {weather_info['sunrise']}\n"
        f"–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞: {weather_info['sunset']}"
    )
    await message.answer(weather_message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≥–æ–¥—ã
    if weather_info['main'].lower() == 'rain':
        await message.answer_photo(
            'https://rus.azattyq-ruhy.kz/cache/imagine/main_page_full/uploads/news/2024/04/23/66279f48c17de087860562.jpg')
    elif weather_info['main'].lower() == 'clear':
        await message.answer_photo('https://bolzhau.com/uploads/image/2/almaty-weather.jpg')
    elif weather_info['main'].lower() in ['clouds', 'cloudy']:
        await message.answer_photo(
            'https://ru.qaz365.kz/cache/imagine/1200/uploads/news/2024/07/14/6693d41271181600866121.webp')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    current_time = datetime.now(pytz.timezone('Asia/Almaty')).strftime('%H:%M')

    await message.answer('–í–æ—Ç —Ç–∞–∫–∏–µ –¥–µ–ª–∞...–î–∞–π –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å ü§î')
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ò–ò
    question = f"–ü–æ–≥–æ–¥–∞ –≤ –ê–ª–º–∞—Ç—ã —Å–µ–π—á–∞—Å: {weather_info['description']}. –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_info['temp']}¬∞C. –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_info['feels_like']}¬∞C. –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_info['humidity']}%. –î–∞–≤–ª–µ–Ω–∏–µ: {weather_info['pressure']} hPa. –í–∏–¥–∏–º–æ—Å—Ç—å: {weather_info['visibility']} –º. –í–µ—Ç–µ—Ä: {weather_info['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {wind_direction}. –í—Ä–µ–º—è: {current_time}. –ö–∞–∫ –ª—É—á—à–µ –æ–¥–µ—Ç—å—Å—è –º—É–∂—á–∏–Ω–µ –∏ —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥–µ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ –¥–Ω—è?"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
    ai_response = question_answer_from_ChatGPT(question)
    await message.answer(ai_response)


@dp.message(Command("weather_later"))
async def weather_later(message: Message):
    await message.answer("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π:")
    forecast = get_forecast()
    if forecast is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
        return

    today = datetime.now(pytz.timezone('Asia/Almaty')).date()
    headers = ["–ó–ê–í–¢–†–ê", "–ü–û–°–õ–ï–ó–ê–í–¢–†–ê", "–ß–ï–†–ï–ó 3 –î–ù–Ø", "–ß–ï–†–ï–ó 4 –î–ù–Ø", "–ß–ï–†–ï–ó 5 –î–ù–ï–ô"]

    for i, day in enumerate(forecast[:5]):
        day_of_week = days_of_week[(today + timedelta(days=i + 1)).strftime('%A')]
        wind_direction = day['wind_direction']
        forecast_message = (
            f"--------{headers[i]}, {day_of_week}--------\n"
            f"–î–∞—Ç–∞: {day['date']}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temp_max']}¬∞C\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temp_min']}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%\n"
            f"–í–µ—Ç–µ—Ä: {day['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wind_direction}\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã:\n"
        )
        for weather in day['weather']:
            forecast_message += f"  {weather['time']}: {weather['main']} - {weather['description']}\n"
        await message.answer(forecast_message)

    await message.answer(f"–§–æ—Ä–º–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –¥–∞–π –µ—â–µ —Ä–∞–∑ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø–æ–≥–æ–¥—É...üëÄ")
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ò–ò –¥–ª—è –æ–±—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    question = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ê–ª–º–∞—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π:\n"
    for i, day in enumerate(forecast[:5]):
        day_of_week = days_of_week[(today + timedelta(days=i + 1)).strftime('%A')]
        wind_direction = day['wind_direction']
        question += (
            f"{headers[i]}, {day_of_week}: {day['weather'][0]['description']}. "
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temp_max']}¬∞C, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temp_min']}¬∞C. "
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%. –í–µ—Ç–µ—Ä: {day['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {wind_direction}.\n"
        )
    question += "–ö–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –∏ —á–µ–º –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥–µ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö –Ω–∞ —ç—Ç–∏ –¥–Ω–∏?"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
    ai_response = question_answer_from_ChatGPT(question)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π:\n{ai_response}")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
